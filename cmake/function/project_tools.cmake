function(project_copy_shared_lib)
    list(GET ARGV -1 DST)
    list(REMOVE_AT ARGV -1)
    foreach(SRC IN LISTS ARGV)
        #get_filename_component(SRC_REAL_PATH ${SRC} REALPATH)
        #get_filename_component(SRC_NAME ${SRC} NAME)
        #get_filename_component(SRC_REAL_NAME ${SRC_REAL_PATH} NAME)
        file(
            COPY ${SRC}
            DESTINATION ${DST}
            FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
        )

        #if (NOT ${SRC_REAL_NAME} STREQUAL ${SRC_NAME})
        #        file(RENAME "${DST}/${SRC_REAL_NAME}" "${DST}/${SRC_NAME}")
        #    endif()
    endforeach()
endfunction()

set(LOG_WRAPPER_CATEGORIZE_SIZE 16 CACHE STRING "全局日志分类个数限制")
add_compiler_define(LOG_WRAPPER_CATEGORIZE_SIZE=${LOG_WRAPPER_CATEGORIZE_SIZE})



set (PROJECT_INSTALL_EXPORT_NAME "${PROJECT_NAME}-target")
set (PROJECT_INSTALL_EXPORT_FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${PROJECT_INSTALL_EXPORT_NAME}.cmake")
if (NOT EXISTS "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake")
    file(MAKE_DIRECTORY "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake")
endif ()
macro(project_install_and_export_targets)
    foreach(PROJECT_INSTALL_EXPORT_TARGET ${ARGN})
        install(TARGETS ${PROJECT_INSTALL_EXPORT_TARGET}
            EXPORT ${PROJECT_INSTALL_EXPORT_NAME}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        )
    endforeach()
    unset(PROJECT_INSTALL_EXPORT_TARGET)
endmacro()


unset(PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS)
if (COMPILER_STRICT_CFLAGS)
    list(APPEND PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS ${COMPILER_STRICT_CFLAGS})
endif ()
if (COMPILER_STRICT_EXTRA_CFLAGS)
    list(APPEND PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS ${COMPILER_STRICT_EXTRA_CFLAGS})
endif ()
